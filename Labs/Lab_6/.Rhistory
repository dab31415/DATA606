yrbss
data(yrbss)
library(tidyverse)
library(openintro)
library(infer)
yrbss
a <- yrbss
View(a)
yrbss %>%
count(text_while_driving_30d)
no_helmet <- yrbss %>%
filter(helmet_12m == "never")
no_helmet <- no_helmet %>%
mutate(text_ind = ifelse(text_while_driving_30d == "30", "yes", "no"))
View(no_helmet)
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m == 'never' && text_while_driving_30d == 30,1,0)) %>%
count(text_no_helmet)
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m == 'never' & text_while_driving_30d == 30,1,0)) %>%
count(text_no_helmet)
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30,1,0)) %>%
count(text_no_helmet)
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30,0,1)) %>%
count(text_no_helmet)
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30 | is.na(helmet_12m) | is.na(text_while_driving_30d),0,1)) %>%
count(text_no_helmet)
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30 | is.na(helmet_12m) | is.na(text_while_driving_30d),0,1)) %>%
count(text_no_helmet) %>%
mutate(pct = count / sum(count))
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30 | is.na(helmet_12m) | is.na(text_while_driving_30d),0,1)) %>%
count(text_no_helmet) %>%
mutate(pct = count / sum(count))
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30 | is.na(helmet_12m) | is.na(text_while_driving_30d),0,1)) %>%
count(text_no_helmet) %>%
mutate(pct = n / n())
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30 | is.na(helmet_12m) | is.na(text_while_driving_30d),0,1)) %>%
count(text_no_helmet) %>%
mutate(pct = n / sum(n))
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30 | is.na(helmet_12m) | is.na(text_while_driving_30d),'No','Yes')) %>%
count(text_no_helmet) %>%
mutate(pct = n / sum(n))
no_helmet %>%
specify(response = text_ind, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
no_helmet <- yrbss %>%
filter(helmet_12m == "never")
no_helmet <- no_helmet %>%
mutate(text_ind = ifelse(text_while_driving_30d == "30", "yes", "no"))
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30 | is.na(helmet_12m) | is.na(text_while_driving_30d),'No','Yes')) %>%
count(text_no_helmet) %>%
mutate(pct = n / sum(n))
no_helmet %>%
specify(response = text_ind, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30 | is.na(helmet_12m) | is.na(text_while_driving_30d),'No','Yes')) %>%
count(text_no_helmet) %>%
mutate(pct = n / sum(n))
no_helmet <- no_helmet %>%
mutate(text_ind = ifelse(text_while_driving_30d == "30", "yes", "no")) %>%
count(text_ind) %>%
mutate(pct = n / sum(n))
no_helmet <- yrbss %>%
filter(helmet_12m == "never")
no_helmet <- no_helmet %>%
mutate(text_ind = ifelse(text_while_driving_30d == "30", "yes", "no")) %>%
count(text_ind) %>%
mutate(pct = n / sum(n))
no_helmet <- yrbss %>%
filter(helmet_12m == "never")
no_helmet <- no_helmet %>%
mutate(text_ind = ifelse(text_while_driving_30d == "30", "yes", "no"))
no_helmet <- no_helmet %>%
mutate(text_ind = ifelse(text_while_driving_30d == "30", "yes", "no"))
no_helmet %>%
count(text_ind) %>%
mutate(pct = n / sum(n))
no_helmet <- no_helmet %>%
mutate(text_ind = ifelse(text_while_driving_30d != "30" | is.na(text_while_driving_30d), "no", "yes"))
no_helmet %>%
count(text_ind) %>%
mutate(pct = n / sum(n))
no_helmet %>%
specify(response = text_ind, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
no_helmet <- no_helmet %>%
mutate(text_ind = ifelse(text_while_driving_30d != "30" | is.na(text_while_driving_30d), "no", "yes"))
no_helmet %>%
count(text_ind) %>%
mutate(pct = n / sum(n))
p <- 463 / (463+6514)
SE <- sqrt(p*(1-p)/nrow(no_helmet))
pnorm(.975)
yrbss
yrbss %>%
count(hours_tv_per_school_day)
yrbss %>%
count(hours_tv_per_school_day)
no_tv <- yrbss %>%
filter(hours_tv_per_school_day == 'do not watch')
yrbss %>%
count(physically_active_7d)
yrbss %>%
count(hours_tv_per_school_day)
no_tv <- yrbss %>%
filter(hours_tv_per_school_day == 'do not watch') %>%
mutate(inactive = ifelse(physically_active_7d == 0),"yes","no")
yrbss %>%
count(hours_tv_per_school_day)
no_tv <- yrbss %>%
filter(hours_tv_per_school_day == 'do not watch') %>%
mutate(inactive = ifelse(physically_active_7d == 0,"yes","no"))
no_tv <- yrbss %>%
filter(hours_tv_per_school_day == 'do not watch') %>%
mutate(inactive = ifelse(physically_active_7d == 0,"yes","no"))
no_tv %>%
specify(response = text_ind, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
no_tv <- yrbss %>%
filter(hours_tv_per_school_day == 'do not watch') %>%
mutate(inactive = ifelse(physically_active_7d == 0,"yes","no"))
no_tv %>%
specify(response = inactive, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
# Chunk 1: global_options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
library(infer)
# Chunk 3
yrbss %>%
count(text_while_driving_30d)
# Chunk 4
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30 | is.na(helmet_12m) | is.na(text_while_driving_30d),'No','Yes')) %>%
count(text_no_helmet) %>%
mutate(pct = n / sum(n))
# Chunk 5: no helmet
no_helmet <- yrbss %>%
filter(helmet_12m == "never")
# Chunk 6: indicator-texting
no_helmet <- no_helmet %>%
mutate(text_ind = ifelse(text_while_driving_30d != "30" | is.na(text_while_driving_30d), "no", "yes"))
no_helmet %>%
count(text_ind) %>%
mutate(pct = n / sum(n))
# Chunk 7: nohelmet-text-ci
no_helmet %>%
specify(response = text_ind, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
# Chunk 8
p <- 463 / (463+6514)
SE <- sqrt(p*(1-p)/nrow(no_helmet))
# Chunk 9
no_tv <- yrbss %>%
filter(hours_tv_per_school_day == 'do not watch') %>%
mutate(inactive = ifelse(physically_active_7d == 0,"yes","no"))
no_tv %>%
specify(response = inactive, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
# Chunk 10: n-for-me-plot
n <- 1000
# Chunk 11: p-me
p <- seq(from = 0, to = 1, by = 0.01)
me <- 2 * sqrt(p * (1 - p)/n)
dd <- data.frame(p = p, me = me)
ggplot(data = dd, aes(x = p, y = me)) +
geom_line() +
labs(x = "Population Proportion", y = "Margin of Error")
# Chunk 1: global_options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
library(infer)
# Chunk 3
yrbss %>%
count(text_while_driving_30d)
# Chunk 4
yrbss %>%
mutate(text_no_helmet = ifelse(helmet_12m != 'never' | text_while_driving_30d != 30 | is.na(helmet_12m) | is.na(text_while_driving_30d),'No','Yes')) %>%
count(text_no_helmet) %>%
mutate(pct = n / sum(n))
# Chunk 5: no helmet
no_helmet <- yrbss %>%
filter(helmet_12m == "never")
# Chunk 6: indicator-texting
no_helmet <- no_helmet %>%
mutate(text_ind = ifelse(text_while_driving_30d != "30" | is.na(text_while_driving_30d), "no", "yes"))
no_helmet %>%
count(text_ind) %>%
mutate(pct = n / sum(n))
# Chunk 7: nohelmet-text-ci
no_helmet %>%
specify(response = text_ind, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
# Chunk 8
p <- 463 / (463+6514)
SE <- sqrt(p*(1-p)/nrow(no_helmet))
# Chunk 9
no_tv <- yrbss %>%
filter(hours_tv_per_school_day == 'do not watch') %>%
mutate(inactive = ifelse(physically_active_7d == 0,"yes","no"))
no_tv %>%
specify(response = inactive, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
# Chunk 10: n-for-me-plot
n <- 1000
# Chunk 11: p-me
p <- seq(from = 0, to = 1, by = 0.01)
me <- 2 * sqrt(p * (1 - p)/n)
# Chunk 12: me-plot
dd <- data.frame(p = p, me = me)
ggplot(data = dd, aes(x = p, y = me)) +
geom_line() +
labs(x = "Population Proportion", y = "Margin of Error")
library(shiny)
shinyApp(
ui = fluidPage(
numericInput("n", label = "Sample size:", value = 300),
sliderInput("p", label = "Population proportion:",
min = 0, max = 1, value = 0.1, step = 0.01),
numericInput("x_min", label = "Min for x-axis:", value = 0, min = 0, max = 1),
numericInput("x_max", label = "Max for x-axis:", value = 1, min = 0, max = 1),
plotOutput('plotOutput')
),
server = function(input, output) {
output$plotOutput = renderPlot({
pp <- data.frame(p_hat = rep(0, 5000))
for(i in 1:5000){
samp <- sample(c(TRUE, FALSE), input$n, replace = TRUE,
prob = c(input$p, 1 - input$p))
pp$p_hat[i] <- sum(samp == TRUE) / input$n
}
bw <- diff(range(pp$p_hat)) / 30
ggplot(data = pp, aes(x = p_hat)) +
geom_histogram(binwidth = bw) +
xlim(input$x_min, input$x_max) +
ggtitle(paste0("Distribution of p_hats, drawn from p = ", input$p, ", n = ", input$n))
})
},
options = list(height = 500)
)
library(shiny)
shinyApp(
ui = fluidPage(
numericInput("n", label = "Sample size:", value = 300),
sliderInput("p", label = "Population proportion:",
min = 0, max = 1, value = 0.1, step = 0.01),
numericInput("x_min", label = "Min for x-axis:", value = 0, min = 0, max = 1),
numericInput("x_max", label = "Max for x-axis:", value = 1, min = 0, max = 1),
plotOutput('plotOutput')
),
server = function(input, output) {
output$plotOutput = renderPlot({
pp <- data.frame(p_hat = rep(0, 5000))
for(i in 1:5000){
samp <- sample(c(TRUE, FALSE), input$n, replace = TRUE,
prob = c(input$p, 1 - input$p))
pp$p_hat[i] <- sum(samp == TRUE) / input$n
}
bw <- diff(range(pp$p_hat)) / 30
ggplot(data = pp, aes(x = p_hat)) +
geom_histogram(binwidth = bw) +
xlim(input$x_min, input$x_max) +
ggtitle(paste0("Distribution of p_hats, drawn from p = ", input$p, ", n = ", input$n))
})
},
options = list(height = 500)
)
library(shiny)
shinyApp(
ui = fluidPage(
numericInput("n", label = "Sample size:", value = 300),
sliderInput("p", label = "Population proportion:",
min = 0, max = 1, value = 0.1, step = 0.01),
numericInput("x_min", label = "Min for x-axis:", value = 0, min = 0, max = 1),
numericInput("x_max", label = "Max for x-axis:", value = 1, min = 0, max = 1),
plotOutput('plotOutput')
),
server = function(input, output) {
output$plotOutput = renderPlot({
pp <- data.frame(p_hat = rep(0, 5000))
for(i in 1:5000){
samp <- sample(c(TRUE, FALSE), input$n, replace = TRUE,
prob = c(input$p, 1 - input$p))
pp$p_hat[i] <- sum(samp == TRUE) / input$n
}
bw <- diff(range(pp$p_hat)) / 30
ggplot(data = pp, aes(x = p_hat)) +
geom_histogram(binwidth = bw) +
xlim(input$x_min, input$x_max) +
ggtitle(paste0("Distribution of p_hats, drawn from p = ", input$p, ", n = ", input$n))
})
},
options = list(height = 500)
)
library(shiny)
shinyApp(
ui = fluidPage(
numericInput("n", label = "Sample size:", value = 300),
sliderInput("p", label = "Population proportion:",
min = 0, max = 1, value = 0.1, step = 0.01),
numericInput("x_min", label = "Min for x-axis:", value = 0, min = 0, max = 1),
numericInput("x_max", label = "Max for x-axis:", value = 1, min = 0, max = 1),
plotOutput('plotOutput')
),
server = function(input, output) {
output$plotOutput = renderPlot({
pp <- data.frame(p_hat = rep(0, 5000))
for(i in 1:5000){
samp <- sample(c(TRUE, FALSE), input$n, replace = TRUE,
prob = c(input$p, 1 - input$p))
pp$p_hat[i] <- sum(samp == TRUE) / input$n
}
bw <- diff(range(pp$p_hat)) / 30
ggplot(data = pp, aes(x = p_hat)) +
geom_histogram(binwidth = bw) +
xlim(input$x_min, input$x_max) +
ggtitle(paste0("Distribution of p_hats, drawn from p = ", input$p, ", n = ", input$n))
})
},
options = list(height = 500)
)
View(no_helmet)
yrbss %>%
count(school_night_hours_sleep)
sleep10 <- yrbss %>%
filter(school_night_hours_sleep == '10+')
View(sleep10)
sleep10 <- yrbss %>%
filter(school_night_hours_sleep == '10+') %>%
mutate(daily_train = ifelse(strength_training_7d == 7,"yes","no"))
sleep10 <- yrbss %>%
filter(school_night_hours_sleep == '10+') %>%
mutate(daily_train = ifelse(strength_training_7d == 7,"yes","no"))
sleep10 %>%
count(daily_train) %>%
mutate(p = n / sum(n))
sleep10 <- yrbss %>%
filter(school_night_hours_sleep == '10+') %>%
mutate(daily_train = ifelse(strength_training_7d == 7,"yes","no"))
sleep10 %>%
count(daily_train) %>%
mutate(p = n / sum(n))
str_train <- yrbss %>%
filter(strength_training_7d == 7) %>%
mutate(sleep10 = ifelse(school_night_hours_sleep == '10+',"yes","no"))
str_train %>%
count(sleep10) %>%
mutate(p = n / sum(n))
yrbss %>% count(school_night_hours_sleep,strength_training_7d)
sleep10 <- yrbss %>%
filter(school_night_hours_sleep == '10+') %>%
mutate(daily_train = ifelse(strength_training_7d == 7,"yes","no"))
sleep10 %>%
specify(response = daily_train, success = "yes") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "prop") %>%
get_ci(level = 0.95)
pnorm(.95)
qnorm(.95)
pnorm(.05)
qnorm(.05)
qnorm(.025)
qnorm(.975) - qnorm(.025)
qnorm(.975)
qnorm(.95)
knitr::opts_chunk$set(echo = TRUE)
ME = 1.96 * sqrt((.48*.52)/1259)
(.48 - ME)
(.48 + ME)
ME = 1.96 * sqrt((.08 * .92)/11545 + (.088 * .912)/4691)
((.008) - ME)
((.008) + ME)
# expected woods
(.048 * 426)
# expected cultivated grassplot
(.147 * 426)
# expected deciduous forests
(.396 * 426)
# expected other
((1-.048-.147-.396) * 426)
chisq.test(c(4,16,61,345),c(.048,.147,.396,1-.048-.147-.396))
?chisq.test()
chisq.test(x = c(4,16,61,345),p = c(.048,.147,.396,1-.048-.147-.396))
(2607/50739)
(2607/50739)
(48132/50739)
(.0514 * 6617)
(2607/50739 * 6617)
(1 - pchisq(q = 20.93, df = (2-1)*(5-1)))
(expected = 2607/50739 * 6617)
observed = 373
((observed - expected)^2/expected)
